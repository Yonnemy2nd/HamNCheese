//import groovy.json.JsonOutput
//import groovy.json.JsonSlurper

plugins {
    id 'dev.architectury.loom' version '0.7.2-SNAPSHOT'
    id 'io.github.juuxel.loom-quiltflower' version '1.1.1'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

version = project.version
group = 'coffeecatrailway.' + project.modId
archivesBaseName = project.modId

loom {
    // use this if you are using the official mojang mappings
    // and want loom to stop warning you about their license
    silentMojangMappingsLicense()

//    mixinConfig = [""]

    dataGen {
        mod project.modId
    }

    runs {
        client {
            runDir "run/client"
        }
        server {
            runDir "run/server"
        }
    }

    launches {
        data {
            arg "--existing", file('src/main/resources').absolutePath
        }
    }
}

configurations {
    shade
}

repositories {
    mavenLocal()
    maven { // JustEnoughItems
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven { // JustEnoughItems fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven { // Top
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven { // BOP
        url = "https://cursemaven.com"
    }
    maven { // Sonar
        name = "Jitpack"
        url = "https://jitpack.io"
    }
}

sourceSets.main.resources {
    srcDir "src/generated/resources"
}

dependencies {
    // to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.mcVersion}"

    // choose what mappings you want to use here
    // leave this uncommented if you want to use mojang's official mappings
    mappings minecraft.officialMojangMappings()

    // uncomment this if you want to use yarn mappings
    // mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    // uncomment this if you want to use mcp mappings
    //mappings "de.oceanlabs.mcp:mcp_snapshot:20201028-1.16.3"

    // your forge dependency, this is **required** when using Forge Loom in forge mode!
    forge "net.minecraftforge:forge:${project.mcVersion}-${project.forgeVersion}"

    modCompileOnly "mezz.jei:jei-${project.jeiVersion}:api"
    modRuntime "mezz.jei:jei-${project.jeiVersion}"

    modCompileOnly "mcjty.theoneprobe:TheOneProbe-1.16:${project.topVersion}:api"
    modRuntime "mcjty.theoneprobe:TheOneProbe-1.16:${project.topVersion}"

    modImplementation "curse.maven:biomes-o-plenty-220318:${project.bopVersion}"
    modImplementation "curse.maven:druidcraft-340991:${project.druidcraftVersion}"
    modImplementation "curse.maven:the-twilight-forest-227639:${project.twilightVersion}"

    modRuntime "curse.maven:catalogue-459701:3335979"

    modImplementation "com.github.Ocelot5836:Sonar:${project.sonar}"
    shade "com.github.Ocelot5836:Sonar:${project.sonar}"
}

processResources {
    inputs.property("modId", project.modId)
    inputs.property("version", project.version)
    inputs.property("name", project.name)
    inputs.property("author", project.author)
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'modId': project.modId, 'version': project.version, 'name': project.name, 'author': project.author
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }

    // Minify json resources
//    doLast {
//        fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
//            File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
//        }
//    }
}

shadowJar {
    configurations = [project.configurations.shade]
    relocate 'io.github.ocelot.sonar', "io.github.ocelot.${project.modId}.lib"

    exclude(["**/*.ase", "**/*.bbmodel", "**/assets/biomesoplenty", "**/assets/twilightforest", "**/assets/druidcraft"])
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    def targetVersion = 8
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = targetVersion
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${archivesBaseName}",
                "Specification-Vendor"    : "${project.author}",
                "Specification-Version"   : "${project.version}",
                "Implementation-Title"    : "${project.name}",
                "Implementation-Version"  : "${project.version}",
                "Implementation-Vendor"   : "${project.author}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
